---
title: "tat_dashboard_data"
author: "Arush Mohan, Peter Shakeshaft"
date: "`r Sys.Date()`"
params:
  #input_dir: "data/providers"  # Path to the directory where provider folders are stored
  #input_dir: "C:\Users\PeterShakeshaft\OneDrive - NHS\Turnaround Times\Provider Submissions\GOSH"
  submission_month: "Oct24"  # The date of data submission.
format: html
editor: source
---

##Setup

```{r}
#| echo: false

library(renv) 
source('src/functions.R')

```

```{r}
#| echo: false

# Define parameters for the file paths and other variables
input_dir <- c(r"{C:\Users\PeterShakeshaft\OneDrive - NHS\Turnaround Times\Provider Submissions\GOSH}",
               r"{C:\Users\PeterShakeshaft\OneDrive - NHS\Turnaround Times\Provider Submissions\MEH}",
               r"{C:\Users\PeterShakeshaft\OneDrive - NHS\Turnaround Times\Provider Submissions\NMUH}",
               r"{C:\Users\PeterShakeshaft\OneDrive - NHS\Turnaround Times\Provider Submissions\RFL}",
               r"{C:\Users\PeterShakeshaft\OneDrive - NHS\Turnaround Times\Provider Submissions\RNOH}",
               r"{C:\Users\PeterShakeshaft\OneDrive - NHS\Turnaround Times\Provider Submissions\UCLH}"
               #r"{C:\Users\PeterShakeshaft\OneDrive - NHS\Turnaround Times\Provider Submissions\Whittington}"
               )

submission_month <- params$submission_month

dsn_name <- "SANDPIT_DSN_TEST"
database_name <- "Data_Lab_NCL_Dev"
schema_name <- "PeterS"
table_name <- "turnaround_times"
schema_table_name <- paste(schema_name,table_name,sep = ".")
#full_table_name <- paste(database_name,schema_name,table_name,sep = ".")
db_sch_tbl_name <- paste0(database_name,".",schema_name,".",table_name)

# List all files in the input directory. recursive = FALSE doesn't look in subdirectories (e.g. historical/archive folders)
all_files <- list.files(input_dir, recursive = FALSE, full.names = TRUE, pattern = "*.csv")

# Only read files for selected submission month
all_files <- all_files[grep(submission_month, all_files, perl=T)] 
```


## Import, assign metadata and cleanse data

```{r}

# apply processing function to list of files to form single dataset
combined_data <- map_dfr(all_files, process_provider_file)

## Pare down dataset to just essential columns - for if denormalising in SQL
combined_data_pared <- combined_data %>% select(diagnostic_test_date_time,
                                                # diagnostic_test_request_date_time,
                                                service_report_issue_date_time,
                                                patient_source_type,
                                                priority_type_code,
                                                imaging_code_nicip,
                                                imaging_code_snomed,
                                                provider_site_code,
                                                TAT_scan,
                                                TAT_report,
                                                TAT_overall,
                                                data_type,
                                                data_period,
                                                cancer_pathway_flag
                                                )

```

## Import lookup tables

```{r}
lookup_path <- "docs/lookups"
lookup_file_name <- list.files(lookup_path)
lookup_full_path <- paste(lookup_path, lookup_file_name, sep = "\\")

# run function to read lookup tables
lookups <- read_excel_allsheets(lookup_full_path)

# clean column names of lookup tables
lookups <- lapply(lookups, janitor::clean_names)

# turns from list of data frames into separate data frames
list2env(lookups, envir=.GlobalEnv)

# # query to pull organisation lookup table
# org_query <- "SELECT
#               Organisation_Code
#               ,LEFT(Organisation_Code,3) 'Organisation_Trust_Code'
#               ,Organisation_Name
#               ,SK_OrganisationTypeID
#               FROM [Dictionary].[dbo].[Organisation]
#               where
#               SK_OrganisationTypeID IN (41,42)"
# 
# lookup_organisation <- dbGetQuery(con, org_query) %>% janitor::clean_names(case = "snake")


```

## Wrangle and de-normalise dataset for final output

```{r}

wrangled_data <- combined_data %>%
  # pre-select so not processing unnecesary columns
  select(diagnostic_test_date_time,
         service_report_issue_date_time,
         patient_source_type,
         priority_type_code,
         priority_type_code_routine_default,
         combined_imaging_code,
         provider_site_code,
         trust_code,
         TAT_scan,
         TAT_report,
         TAT_overall,
         data_type,
         data_period,
         cancer_pathway_flag) %>%
  # join the lookup tables
  left_join(lookup_patient_source_setting, by = join_by(patient_source_type == code)) %>%
  left_join(lookup_combined_image_code, by = join_by(combined_imaging_code == code)) %>%
  left_join(lookup_targets, by = join_by(priority_type_code_routine_default == priority_type, 
                                         patient_source_type == patient_source_setting, 
                                         modality == imaging_service_split)) %>% 
  left_join(lookup_modality, by = join_by(modality == modality_intermediate_derived_from_nicip_snomed)) %>% 
  left_join(lookup_priority_type, by = join_by(priority_type_code == code)) %>% 
  left_join(lookup_trusts, by = join_by(trust_code == trust_code)) %>%
  left_join(lookup_sites, by = join_by(provider_site_code == site_code)) %>%
  left_join(lookup_sitegroups, by = join_by(site_group_id == site_group_id)) %>%
  #mutates here to do calculated field, provider groupings etc
  mutate(
         BreachScan = case_when(priority_type_code == 3 & TAT_scan > pmin(7*24, ncl_scan_target_hours) ~ 1,
                                TAT_scan > ncl_scan_target_hours ~ 1,
                                TAT_scan <= ncl_scan_target_hours ~0,
                                .default = NA),
         BreachScan7Day = case_when(priority_type_code == 3 & TAT_scan > pmin(5*24, ncl_scan_target_hours) ~ 1,
                                    TAT_scan > ncl_scan_target_hours ~ 1,
                                    TAT_scan <= ncl_scan_target_hours ~0,
                                    .default = NA),
         BreachReportNCL = case_when(priority_type_code == 3 & TAT_report > pmin(3*24, ncl_report_target_hours) ~ 1,
                                     TAT_report > ncl_report_target_hours ~ 1,
                                     TAT_report <= ncl_report_target_hours ~0,
                                     .default = NA),
         BreachReportNCLCancer7Day = case_when(priority_type_code == 3 & TAT_report > pmin(2*24, ncl_report_target_hours) ~ 1,
                                               TAT_report > ncl_report_target_hours ~ 1,
                                               TAT_report <= ncl_report_target_hours ~0,
                                               .default = NA),
         BreachReport4Week = case_when(TAT_report > 4*24*7 ~ 1,
                                       TAT_report <= 4*24*7 ~0,
                                       .default = NA),
         BreachReportNHSE = case_when(priority_type_code == 3 & TAT_report > pmin(3*24, nhse_report_tat_target_hours) ~ 1,
                                      TAT_report > nhse_report_tat_target_hours ~ 1,
                                      TAT_report <= nhse_report_tat_target_hours ~0,
                                      .default = NA),
         BreachReportNHSECancer7Day = case_when(priority_type_code == 3 & TAT_report > pmin(2*24, nhse_report_tat_target_hours) ~ 1,
                                                TAT_report > nhse_report_tat_target_hours ~ 1,
                                                TAT_report <= nhse_report_tat_target_hours ~0,
                                                .default = NA),
         BreachOverall = case_when(priority_type_code == 3 & TAT_overall > pmin(10*24, ncl_overall_tat_target_hours) ~ 1,
                                   TAT_overall > ncl_overall_tat_target_hours ~ 1,
                                   TAT_overall <= ncl_overall_tat_target_hours ~0,
                                   .default = NA),
         BreachOverallCancer7Day = case_when(priority_type_code == 3 & TAT_overall > pmin(7*24, ncl_overall_tat_target_hours) ~ 1,
                                             TAT_overall > ncl_overall_tat_target_hours ~ 1,
                                             TAT_overall <= ncl_overall_tat_target_hours ~0,
                                             .default = NA),
         TestAwaitingReport = case_when(is.na(service_report_issue_date_time) == TRUE & data_type == "Flex" ~ 1,
                                        .default = 0),
         TestUnreported = case_when(is.na(service_report_issue_date_time) == TRUE & data_type == "Freeze" ~ 1,
                                    .default = 0),
         # set NA values to "unclassified"
         patient_source_setting = replace_na(patient_source_setting, "Unclassified"),
         modality.y = replace_na(modality.y, "Unclassified"),
         description = replace_na(description, "Unclassified"), # PriorityTypeCode
         replace_na(site_group_long, "Unclassified"),
         replace_na(site_group_short, "Unclassified"),
         replace_na(trust_long, "Unclassified"),
         replace_na(trust_short, "Unclassified")
         
  ) %>% 
  # Final select for output
  select(DiagnosticTestDateTime = diagnostic_test_date_time,
         PatientSourceTypeName = patient_source_setting,
         Modality = modality.y,
         SiteName = site_group_long,
         SiteNameShort = site_group_short,
         ProviderTrust = trust_long,
         ProviderTrustShort = trust_short,
         PriorityTypeCode = description,
         CancerPathwayFlag = cancer_pathway_flag,
         BreachScan,
         BreachScan7Day,
         TATScan = TAT_scan,
         BreachReportNCL,
         BreachReportNCLCancer7Day,
         BreachReport4Week,
         BreachReportNHSE,
         BreachReportNHSECancer7Day,
         TATReport = TAT_report,
         BreachOverall,
         BreachOverallCancer7Day,
         TATOverall = TAT_overall,
         TestAwaitingReport,
         TestUnreported,
         DataType = data_type
  )

# View(wrangled_data %>% filter(is.na(SiteNameLong) == TRUE))
# View(wrangled_data %>% filter(ProviderTrustShort == "Unclassified"))
# View(wrangled_data %>% filter(Modality == "Unclassified"))
# View(combined_data %>% filter(provider_site_code == "F0U9Q"))
#View(combined_data %>% filter(is.na(patient_source_type) == TRUE))

```

## Establishing a connection to the Sandpit

```{r}

# Connect to the Sandpit

con <- dbConnect(odbc::odbc(), 
                 dsn = dsn_name,
                 database = database_name,
                 TrustedConnection = TRUE)
```

## Upload data to sandpit (basic bulk upload or setting new columns)

```{r}
# # Upload using overwrite just to get some data in
# 
# DBI::dbWriteTable(con, DBI::SQL(schema_table_name), wrangled_data, row.names=F, overwrite = TRUE) # write to new main table
# print(paste0(db_sch_tbl_name," overwritten with new data"))

```

## Upload data to sandpit - rolling flex/freeze

```{r}
# #1. delete flex data from previous month

delete_query <- paste0("DELETE FROM ", schema_table_name,
                       " WHERE DataType = 'Flex'")

# Execute the delete query
dbExecute(con, delete_query)
message("Flex data deleted.")

#2. upload new month
DBI::dbWriteTable(con, DBI::SQL(schema_table_name), wrangled_data, row.names=F, append = TRUE) # write to new main table
message("Data appended for ", submission_month,"." )
```

